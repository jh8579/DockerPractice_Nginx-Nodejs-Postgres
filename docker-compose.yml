# docker-compose의 버전을 명시. 버전별로 명령어등의 약간의 차이가 있다.
version: "2"

services:
    nginx:
        # 만들어질 container 이름
        container_name: nginx

        # Dockerfile의 위치
        build: ./nginx

        # 컨테이너 끼리 내부적으로 연결할 때의 alias
        # 예를 들어 A:B 의 경우 이 컨테이너 내에서 B라는 이름으로 A에 연결 할 수 있다.
        # 여기서는 nginx에서 app이라는 도메인을 통해서 app 컨테이너에 접근할 수 있다.
        links:
            - app:app

        # 열어줄 포트
        # 호스트와 연결할 포트:외부에 노출할 포트
        ports:
            - 80:80

    app:
        container_name: app
        build: .

        # 환경변수를 지정할 수 있음.
        environment:
            NODE_ENV: localhost
        ports:
            - 8000
        links:
            - postgres:app_db

    postgres:
        container_name: postgres
        image: postgres:9.3
        ports:
            - 5432
개발중에 컨테이너를 자주 올렸다 내렸다 하는데, 그때마다 데이터베이스가 설치된 컨테이너도 초기화 된다.
테스트에서는 별 상관없지만 실제 서비스에선 데이터가 지워지면 안된다. docker에선 이를 위해서 data volume을 만들 수 있다. 이를 통해서 docker속에 영속성이 유지되는 볼륨을 만들어 주거나 호스트의 디렉토리와 연결 할 수 있다.

 # 데이터 볼륨 지정
        # 호스트 디렉터리:컨테이터 디렉터리
        # 컨테이너 내부에서 해당 경로에 접근하면 지정한 호스트 디렉터리로 접근할 수 있다.
        # 데이터베이스의 경우 유지되어야 할 파일의 위치를 볼륨으로 지정해 주면 
        # 볼륨을 삭제하지 않는 한 컨테이너가 재기동되어도 영속성이 유지된다.
        volumes: 
            - /data/postgres:/var/lib/postgresql/data